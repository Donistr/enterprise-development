@page "/driver/{Id}"
@using DispatchTransportControl.Shared.DTO

@inject IApiClientWrapper ApiClient
@inject IJSRuntime JsRuntime

<EditForm Model="@UpdatedDriver" OnValidSubmit="UpdateDriverAsync">
    <DataAnnotationsValidator/>
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary/>

    <Card>
        <CardHeader>
            <Row Class="justify-content-between">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <h4>Изменить водителя</h4>
                </Column>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="Color.Primary" Type="ButtonType.Submit">
                        Сохранить
                    </Button>
                    <Button Color="Color.Danger" Clicked="DeleteDriverAsync">
                        Удалить
                    </Button>
                    <Button Color="Color.Secondary" onclick="history.back();">
                        Закрыть
                    </Button>
                </Column>
            </Row>
        </CardHeader>

        <CardBody>
            <Field>
                <FieldLabel>Имя</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Name"/>
                <ValidationMessage For="@(() => UpdatedDriver.Name)"/>
            </Field>
            <Field>
                <FieldLabel>Фамилия</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Surname"/>
                <ValidationMessage For="@(() => UpdatedDriver.Surname)"/>
            </Field>
            <Field>
                <FieldLabel>Отчество</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Patronymic"/>
                <ValidationMessage For="@(() => UpdatedDriver.Patronymic)"/>
            </Field>
            <Field>
                <FieldLabel>Паспорт</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Passport"/>
                <ValidationMessage For="@(() => UpdatedDriver.Passport)"/>
            </Field>
            <Field>
                <FieldLabel>Водительское удостоверение</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.DriverLicense"/>
                <ValidationMessage For="@(() => UpdatedDriver.DriverLicense)"/>
            </Field>
            <Field>
                <FieldLabel>Адрес</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Address"/>
                <ValidationMessage For="@(() => UpdatedDriver.Address)"/>
            </Field>
            <Field>
                <FieldLabel>Телефон</FieldLabel>
                <TextEdit @bind-Text="@UpdatedDriver.Phone"/>
                <ValidationMessage For="@(() => UpdatedDriver.Phone)"/>
            </Field>
        </CardBody>
    </Card>
</EditForm>

@code {
    [Parameter] public string Id { get; set; } = "";

    private int DriverId { get; set; }

    private DriverDto UpdatedDriver { get; set; } = new()
    {
        Id = 0,
        Name = "",
        Surname = "",
        Patronymic = "",
        Passport = "",
        DriverLicense = "",
        Address = "",
        Phone = ""
    };

    protected override async Task OnInitializedAsync()
    {
        if (!int.TryParse(Id, out var id))
        {
            throw new Exception("Некорректный идентификатор водителя");
        }

        DriverId = id;
        UpdatedDriver = await ApiClient.GetDriver(DriverId);
        await base.OnInitializedAsync();
    }

    private async Task DeleteDriverAsync()
    {
        await ApiClient.DeleteDriver(DriverId);
        await JsRuntime.InvokeVoidAsync("history.back");
    }

    private async Task UpdateDriverAsync()
    {
        var editedDriver = new DriverDto
        {
            Id = UpdatedDriver.Id,
            Name = UpdatedDriver.Name,
            Surname = UpdatedDriver.Surname,
            Patronymic = UpdatedDriver.Patronymic,
            Passport = UpdatedDriver.Passport,
            DriverLicense = UpdatedDriver.DriverLicense,
            Address = UpdatedDriver.Address,
            Phone = UpdatedDriver.Phone
        };
        UpdatedDriver = await ApiClient.UpdateDriver(editedDriver);
    }

}